View(disfirca_baslangic)
df <- disfirca_baslangic[as.numeric(disfirca_baslangic$price)>0]
#disfirca_baslangic_train<- window(disfirca,start="2019-11-21",end="2020-03-20")
#disfirca_baslangic_test<-window(disfirca,start="2020-03-21")
disfirca_sold <- auto.arima(as.numeric(disfirca_baslangic$sold_count), xreg = as.numeric(disfirca_baslangic$visit_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(disfirca_baslangic$visit_count), h = 2)
#accuracy(yarin_disfirca,disfirca_baslangic_train)
autoplot(yarin_disfirca)
yarin_disfirca$mean
fc <- c(fc, yarin_disfirca$mean[6])
#autoplot(forecast(tbats(disfirca_baslangic[,"sold_count"])))
disfirca_sold <- auto.arima(as.numeric(df$sold_count), xreg = as.numeric(df$favored_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(df$favored_count), h = 2)
autoplot(yarin_disfirca)
yarin_disfirca$mean
#$fc <- c(fc, yarin_disfirca$mean[5])
#bu mevsim mont satilmaz forecast seasonal effect almasa da mantikli forecast veriyor onumuz icin
mont_sold <- auto.arima(as.numeric(mont$sold_count), xreg = as.numeric(mont$ty_visits))
checkresiduals(mont_sold)
yarin_mont <- forecast(mont_sold, xreg = as.numeric(mont$ty_visits), h = 2)
autoplot(yarin_mont)
yarin_mont$mean
<<<<<<< Updated upstream
fc <- c(fc, as.numeric(mont$sold_count[nrow(mont)]))
=======
fc <- c(fc, as.numeric(mont$sold_count[387]))
>>>>>>> Stashed changes
#model sacma tahmin veriyor,en mantiklisi verinin basladigi(-1 siz) tarihden itibaren xts alindi
mendil_available <- window(mendil,start="2019-09-09")
mendil_sold <- auto.arima(as.numeric(mendil_available$sold_count), xreg = as.numeric(mendil_available$price))
checkresiduals(mendil_sold)
yarin_mendil <- forecast(mendil_sold, xreg = as.numeric(mendil_available$price), h = 2)
autoplot(yarin_mendil)
yarin_mendil$mean
fc <- c(fc,yarin_mendil$mean[1])
#seasonality effect visit_countta daha iyi ama neagtif veriyor price birakildi
bikini_sold <- auto.arima(as.numeric(bikini$sold_count), xreg = as.numeric(bikini$price))
checkresiduals(bikini_sold)
yarin_bikini <- forecast(bikini_sold, xreg = as.numeric(bikini$price), h = 2)
yarin_bikini$mean
autoplot(yarin_bikini)
fc <- c(fc, yarin_bikini$mean[7])
kulaklik_sold <- auto.arima(as.numeric(kulaklik$sold_count), xreg = as.numeric(kulaklik$price))
checkresiduals(kulaklik_sold)
yarin_kulaklik <- forecast(kulaklik_sold, xreg = as.numeric(kulaklik$price), h = 2)
autoplot(yarin_kulaklik)
yarin_kulaklik$mean
fc <- c(fc, yarin_kulaklik$mean[1])
supurge_sold <- auto.arima(as.numeric(supurge$sold_count), xreg = as.numeric(supurge$price))
checkresiduals(supurge_sold)
yarin_supurge <- forecast(supurge_sold, xreg = as.numeric(supurge$price), h = 2)
autoplot(yarin_supurge)
fc <- c(fc, yarin_supurge$lower[1])
yuztemizleyici_sold <- auto.arima(as.numeric(yuztemizleyici$sold_count), xreg = as.numeric(yuztemizleyici$price))
checkresiduals(yuztemizleyici_sold)
yarin_yuztemizleyici <- forecast(yuztemizleyici_sold, xreg = as.numeric(yuztemizleyici$price), h = 2)
autoplot(yarin_yuztemizleyici)
fc <- c(fc, yarin_yuztemizleyici$mean[1])
predictions=unique(data[,list(product_content_id)])
predictions[,forecast:=fc]
dates <- seq(as.Date("2019-04-30"), length = uniqueN(data$event_date), by = "days")
tayt <- xts(data[product_content_id==31515569],order.by=dates)
disfirca <- xts(data[product_content_id==32939029],order.by=dates)
mont <- xts(data[product_content_id==3904356],order.by=dates)
mendil <- xts(data[product_content_id==4066298],order.by=dates)
bikini <- xts(data[product_content_id==5926527],order.by=dates)
kulaklik <- xts(data[product_content_id==6676673],order.by=dates)
supurge <- xts(data[product_content_id==7061886],order.by=dates)
yuztemizleyici <- xts(data[product_content_id==85004],order.by=dates)
#autoplot(tayt, facets = TRUE)
#as.numeric(tayt[,"category_sold"])
#price elasticity
#tayt_price_vector <- log(as.numeric(tayt$price>0))
#tayt_sold_vector <- log(as.numeric(tayt$price>0))
#tayt_price_elast <- data.frame(log(tayt_sold_vector),log(tayt_price_vector))
#colnames(tayt_price_elast) <- c("log_sales","log_price")
#tayt_price_elasticity <- lm("log_sales","log_price",data=tayt_price_elast)
#arima model, error test, yarin icin forecast
tayt_basket_psu <- window(tayt,start="2019-11-21")
tayt_duzgun_basket <- tayt_basket_psu [,"basket_count">0]
tayt_sold_psu <- window(tayt,start="2019-11-20",end="2020-05-19")
tayt_duzgun_sold <- tayt_sold_psu [,"basket_count">0]
#tayt_sold <- auto.arima(as.numeric(tayt_duzgun_sold$sold_count), xreg = as.numeric(tayt_duzgun_basket$basket_count))
#checkresiduals(tayt_sold)
#yarin_tayt <- forecast(tayt_sold, xreg = as.numeric(tayt_duzgun_basket$basket_count), h = 2)
tayt_son<-tayt_basket_psu[-179]
tayt_sonn <- tayt_son[as.numeric(tayt_son$price)>0]
yarin_tayt_visit<-forecast(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$visit_count)),xreg=as.numeric(tayt_sonn$visit_count))
checkresiduals(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$visit_count)))
autoplot(yariave<-forecast(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$favored_count)),xreg=as.numeric(tayt_sonn$favored_count)))
#checkresiduals(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$favored_count)))
#autoplot(yarin_tayt_fave)
summary(yarin_tayt_visit)
#summary(yarin_tayt_fave)
tail(tayt$sold_count,5)
yarin_tayt_visit$mean
tail(tayt$sold_count,10)
#yarin_tayt$mean
fc <- c(yarin_tayt_visit$mean[9])
fc
nrow(mont)
isfirca_baslangic<- window(disfirca,start="2019-11-21")
#View(disfirca_baslangic)
df <- disfirca_baslangic[as.numeric(disfirca_baslangic$price)>0]
#disfirca_baslangic_train<- window(disfirca,start="2019-11-21",end="2020-03-20")
#disfirca_baslangic_test<-window(disfirca,start="2020-03-21")
disfirca_sold <- auto.arima(as.numeric(disfirca_baslangic$sold_count), xreg = as.numeric(disfirca_baslangic$visit_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(disfirca_baslangic$visit_count), h = 2)
#accuracy(yarin_disfirca,disfirca_baslangic_train)
autoplot(yarin_disfirca)
yarin_disfirca$mean
fc <- c(fc, yarin_disfirca$mean[6])
#autoplot(forecast(tbats(disfirca_baslangic[,"sold_count"])))
disfirca_sold <- auto.arima(as.numeric(df$sold_count), xreg = as.numeric(df$favored_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(df$favored_count), h = 2)
autoplot(yarin_disfirca)
yarin_disfirca$mean
disfirca_baslangic<- window(disfirca,start="2019-11-21")
#View(disfirca_baslangic)
df <- disfirca_baslangic[as.numeric(disfirca_baslangic$price)>0]
#disfirca_baslangic_train<- window(disfirca,start="2019-11-21",end="2020-03-20")
#disfirca_baslangic_test<-window(disfirca,start="2020-03-21")
disfirca_sold <- auto.arima(as.numeric(disfirca_baslangic$sold_count), xreg = as.numeric(disfirca_baslangic$visit_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(disfirca_baslangic$visit_count), h = 2)
#accuracy(yarin_disfirca,disfirca_baslangic_train)
autoplot(yarin_disfirca)
yarin_disfirca$mean
fc <- c(fc, yarin_disfirca$mean[6])
#autoplot(forecast(tbats(disfirca_baslangic[,"sold_count"])))
disfirca_sold <- auto.arima(as.numeric(df$sold_count), xreg = as.numeric(df$favored_count))
checkresiduals(disfirca_sold)
yarin_disfirca <- forecast(disfirca_sold, xreg = as.numeric(df$favored_count), h = 2)
autoplot(yarin_disfirca)
yarin_disfirca$mean
#$fc <- c(fc, yarin_disfirca$mean[5])
mont_sold <- auto.arima(as.numeric(mont$sold_count), xreg = as.numeric(mont$ty_visits))
checkresiduals(mont_sold)
yarin_mont <- forecast(mont_sold, xreg = as.numeric(mont$ty_visits), h = 2)
autoplot(yarin_mont)
yarin_mont$mean
fc <- c(fc, as.numeric(mont$sold_count[nrow(mont)]))
#fc <- c(fc, as.numeric(mont$sold_count[387]))
#model sacma tahmin veriyor,en mantiklisi verinin basladigi(-1 siz) tarihden itibaren xts alindi
mendil_available <- window(mendil,start="2019-09-09")
mendil_sold <- auto.arima(as.numeric(mendil_available$sold_count), xreg = as.numeric(mendil_available$price))
checkresiduals(mendil_sold)
yarin_mendil <- forecast(mendil_sold, xreg = as.numeric(mendil_available$price), h = 2)
autoplot(yarin_mendil)
yarin_mendil$mean
fc <- c(fc,yarin_mendil$mean[1])
#seasonality effect visit_countta daha iyi ama neagtif veriyor price birakildi
bikini_sold <- auto.arima(as.numeric(bikini$sold_count), xreg = as.numeric(bikini$price))
checkresiduals(bikini_sold)
yarin_bikini <- forecast(bikini_sold, xreg = as.numeric(bikini$price), h = 2)
yarin_bikini$mean
autoplot(yarin_bikini)
fc <- c(fc, yarin_bikini$mean[7])
kulaklik_sold <- auto.arima(as.numeric(kulaklik$sold_count), xreg = as.numeric(kulaklik$price))
checkresiduals(kulaklik_sold)
yarin_kulaklik <- forecast(kulaklik_sold, xreg = as.numeric(kulaklik$price), h = 2)
autoplot(yarin_kulaklik)
yarin_kulaklik$mean
fc <- c(fc, yarin_kulaklik$mean[1])
supurge_sold <- auto.arima(as.numeric(supurge$sold_count), xreg = as.numeric(supurge$price))
checkresiduals(supurge_sold)
yarin_supurge <- forecast(supurge_sold, xreg = as.numeric(supurge$price), h = 2)
autoplot(yarin_supurge)
fc <- c(fc, yarin_supurge$lower[1])
yuztemizleyici_sold <- auto.arima(as.numeric(yuztemizleyici$sold_count), xreg = as.numeric(yuztemizleyici$price))
checkresiduals(yuztemizleyici_sold)
yarin_yuztemizleyici <- forecast(yuztemizleyici_sold, xreg = as.numeric(yuztemizleyici$price), h = 2)
autoplot(yarin_yuztemizleyici)
fc <- c(fc, yarin_yuztemizleyici$mean[1])
predictions=unique(data[,list(product_content_id)])
predictions[,forecast:=fc]
View(predictions)
send_submission(predictions, token, url=subm_url, submit_now=T)
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
require(xts)
require(forecast)
require(ggplot2)
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(product_content_id,event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
post_string=sprintf("%s'%s'=%s",post_string,predictions$product_content_id[i],predictions$forecast[i])
if(i<nrow(predictions)){
post_string=sprintf("%s,",post_string)
} else {
post_string=sprintf("%s)",post_string)
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if(all(c('product_content_id','forecast') %in% names(predictions))){
if(is.numeric(predictions$forecast)){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Wrong column names. Please provide 'product_content_id' and 'forecast' columns")
return(FALSE)
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://167.172.183.67'
u_name = "Group6"
p_word = "HarNGafZYHupCK6x"
submit_now = FALSE
username = u_name
password = p_word
token = get_token(username=u_name, password=p_word, url=subm_url)
data = get_data(token=token,url=subm_url)
#######################
#class(data)
products = unique(data$product_content_id)
tayt = data[product_content_id == products[1]]
tayt = tayt[order(event_date)]
#visit_count
sold_tayt=zoo(tayt[,list(sold_count, visit_count, basket_count, favored_count)],tayt$event_date)
plot(sold_tayt)
disfirca = data[product_content_id == products[2]]
disfirca = disfirca[order(event_date)]
#visit_count & basket_count
sold_disfirca=zoo(disfirca[,list(sold_count, visit_count, basket_count, favored_count)],disfirca$event_date)
plot(sold_disfirca)
mont = data[product_content_id == products[3]]
mont = mont[order(event_date)]
#visit_count | favored_count
sold_mont=zoo(mont[,list(sold_count, visit_count, basket_count, favored_count)],mont$event_date)
plot(sold_mont)
mendil = data[product_content_id == products[4]]
mendil = mendil[order(event_date)]
#visit_count
sold_mendil=zoo(mendil[,list(sold_count, visit_count, basket_count, favored_count)],mendil$event_date)
plot(sold_mendil)
bikini = data[product_content_id == products[5]]
bikini = bikini[order(event_date)]
#favored_count??
sold_bikini=zoo(bikini[,list(sold_count, visit_count, basket_count, favored_count)],bikini$event_date)
plot(sold_bikini)
kulaklik = data[product_content_id == products[6]]
kulaklik = kulaklik[order(event_date)]
#visit_count & (?)favored_count
sold_kulaklik=zoo(kulaklik[,list(sold_count, visit_count, basket_count, favored_count)],kulaklik$event_date)
plot(sold_kulaklik)
supurge = data[product_content_id == products[7]]
supurge = supurge[order(event_date)]
#basket_count + visit_cpunt ??
sold_supurge=zoo(supurge[,list(sold_count, visit_count, basket_count, favored_count)],supurge$event_date)
plot(sold_supurge)
yuztemizleyici = data[product_content_id == products[8]]
yuztemizleyici = yuztemizleyici[order(event_date)]
#visit_count + basket_count ??
sold_yuztemizleyici=zoo(yuztemizleyici[,list(sold_count, visit_count, basket_count, favored_count)],yuztemizleyici$event_date)
plot(sold_yuztemizleyici)
#TREND - TAYT
for_tayt = tayt[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_tayt = for_tayt[event_date > "2019-10-01"]
for_tayt[,time_index:=1:.N]
head(for_tayt)
trend_tayt = lm(sold_count~time_index, data = for_tayt)
#trend_tayt = lm(sold_count~time_index+visit_count, data = for_tayt)
summary(trend_tayt)
trend_tayt_component = trend_tayt$fitted
for_tayt[,lr_trend:=trend_tayt_component]
matplot(for_tayt[,list(sold_count, lr_trend)], type = "l")
for_tayt[,detr_sc:=sold_count-lr_trend]
detr_for_tayt = for_tayt[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_tayt = ts(detr_for_tayt$detr_sc, freq = 7)
plot(y_tayt)
fc_y_tayt = forecast(y_tayt,1)
t_tayt = ts(for_tayt$lr_trend, freq = 7)
fc_t_tayt = forecast(t_tayt, 1)
fc <- c(fc_y_tayt$mean[1]+fc_t_tayt$mean[1])
#SEASONALITY - TAYT - NO SEASONALITY
#f_tayt=fourier(y_tayt, K=3)
#str(f_tayt)
#matplot(f_tayt[1:7,1:2],type='l')
#fit_tayt=lm(y_tayt~f_tayt)
#summary(fit_tayt)
#deseason_tayt=y_tayt-coef(fit_tayt)[1]
#plot(deseason_tayt[1:(7*2)],type='l')
#######################
#TREND - DISFIRCA
for_disfirca = disfirca[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_disfirca = for_disfirca[event_date > "2019-12-01"]
for_disfirca[,time_index:=1:.N]
#head(for_disfirca)
trend_disfirca = lm(sold_count~time_index, data = for_disfirca)
#trend_disfirca = lm(sold_count~time_index+visit_count+basket_count, data = for_disfirca)
summary(trend_disfirca)
trend_disfirca_component = trend_disfirca$fitted
for_disfirca[,lr_trend:=trend_disfirca_component]
matplot(for_disfirca[,list(sold_count, lr_trend)], type = "l")
for_disfirca[,detr_sc:=sold_count-lr_trend]
detr_for_disfirca = for_disfirca[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_disfirca = ts(detr_for_disfirca$detr_sc, freq = 7)
plot(y_disfirca)
fc_y_disfirca = forecast(y_disfirca,1)
t_disfirca = ts(for_disfirca$lr_trend, freq = 7)
fc_t_disfirca = forecast(t_disfirca, 1)
fc <- c(fc, (fc_y_disfirca$mean[1]+fc_t_disfirca$mean[1]))
#SEASONALITY - DISFIRCA - NO SEASONALITY
#f_disfirca=fourier(y_disfirca, K=3)
#str(f_disfirca)
#matplot(f_disfirca[1:7,1:2],type='l')
#fit_disfirca=lm(y_disfirca~f_disfirca)
#summary(fit_disfirca)
#######################
#TREND - MONT - NO TREND
for_mont = mont[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_mont[,time_index:=1:.N]
#head(for_mont)
trend_mont = lm(sold_count~time_index, data = for_mont)
#trend_tayt = lm(sold_count~time_index+visit_count, data = for_tayt)
summary(trend_mont)
y_mont = ts(for_mont$sold_count, freq = 360)
plot(y_mont)
#SEASONALITY - MONT
f_mont=fourier(y_mont, K=10)
#str(f_mont)
matplot(f_mont[1:360,1:2],type='l')
fit_mont=lm(y_mont~f_mont)
summary(fit_mont)
deseason_mont=y_mont-coef(fit_mont)[1]
plot(deseason_mont[1:(360*2)],type='l')
fc_y_mont_deseas = forecast(deseason_mont,1)
fc <- c(fc, max(0,fc_y_mont_deseas$mean[1]))
#######################
#TREND - MENDIL - NO TREND
for_mendil = mendil[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_mendil = for_mendil[event_date > "2019-09-10"]
for_mendil[,time_index:=1:.N]
#head(for_mendil)
#trend_mendil = lm(sold_count~time_index, data = for_mendil)
##trend_mendil = lm(sold_count~time_index+visit_count, data = for_mendil)
#summary(trend_mendil)
y_mendil = ts(for_mendil$sold_count, freq = 7)
plot(y_mendil)
#SEASONALITY - MENDIL - NO SEASONALITY
#f_mendil=fourier(y_mendil, K=3)
#str(f_mendil)
#matplot(f_mendil[1:7,1:2],type='l')
#fit_mendil=lm(y_mendil~f_mendil)
#summary(fit_mendil)
fc_y_mendil <- forecast(y_mendil,1)
fc <- c(fc, fc_y_mendil$mean[1])
#######################
#TREND - BIKINI - ??? NO TREND OLMASI MANTIKLI
for_bikini = bikini[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_bikini[,time_index:=1:.N]
#head(for_bikini)
#trend_bikini = lm(sold_count~time_index, data = for_bikini)
##trend_bikini = lm(sold_count~time_index+favored_count, data = for_bikini)
#summary(trend_bikini)
y_bikini = ts(for_bikini$sold_count, freq = 360)
plot(y_bikini)
#SEASONALITY - BIKINI
f_bikini=fourier(y_bikini, K=10)
str(f_bikini)
matplot(f_bikini[1:360,1:2],type='l')
fit_bikini=lm(y_bikini~f_bikini)
summary(fit_bikini)
deseason_bikini=y_bikini-coef(fit_bikini)[1]
plot(deseason_bikini[1:(360*2)],type='l')
fc_y_bikini_deseas = forecast(deseason_bikini,1)
fc <- c(fc, max(0,fc_y_bikini_deseas$mean[1]))
#######################
#TREND - KULAKLIK
for_kulaklik = kulaklik[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_kulaklik = for_kulaklik[event_date > "2019-06-20"]
for_kulaklik[,time_index:=1:.N]
#head(for_kulaklik)
trend_kulaklik = lm(sold_count~time_index, data = for_kulaklik)
#trend_kulaklik = lm(sold_count~time_index+visit_count+favored_count, data = for_kulaklik)
summary(trend_kulaklik)
trend_kulaklik_component = trend_kulaklik$fitted
for_kulaklik[,lr_trend:=trend_kulaklik_component]
matplot(for_kulaklik[,list(sold_count, lr_trend)], type = "l")
for_kulaklik[,detr_sc:=sold_count-lr_trend]
detr_for_kulaklik = for_kulaklik[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_kulaklik = ts(detr_for_kulaklik$detr_sc, freq = 7)
plot(y_kulaklik)
fc_y_kulaklik = forecast(y_kulaklik,1)
t_kulaklik = ts(for_kulaklik$lr_trend, freq = 7)
fc_t_kulaklik = forecast(t_kulaklik, 1)
fc <- c(fc, (fc_y_kulaklik$mean[1] + fc_t_kulaklik$mean[1]))
#SEASONALITY - KULAKLIK - NO SEASONALITY
#f_kulaklik=fourier(y_kulaklik, K=3)
#str(f_kulaklik)
#matplot(f_kulaklik[1:7,1:2],type='l')
#fit_kulaklik=lm(y_kulaklik~f_kulaklik)
#summary(fit_kulaklik)
#######################
#TREND - SUPURGE
for_supurge = supurge[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_supurge = for_supurge[event_date > "2019-07-25"]
for_supurge[,time_index:=1:.N]
#head(for_supurge)
trend_supurge = lm(sold_count~time_index, data = for_supurge)
#trend_supurge = lm(sold_count~time_index+visit_count+basket_count, data = for_supurge)
summary(trend_supurge)
trend_supurge_component = trend_supurge$fitted
for_supurge[,lr_trend:=trend_supurge_component]
matplot(for_supurge[,list(sold_count, lr_trend)], type = "l")
for_supurge[,detr_sc:=sold_count-lr_trend]
detr_for_supurge = for_supurge[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_supurge = ts(detr_for_supurge$detr_sc, freq = 7)
plot(y_supurge)
fc_y_supurge = forecast(y_supurge,1)
t_supurge = ts(for_supurge$lr_trend, freq = 7)
fc_t_supurge = forecast(t_supurge, 1)
fc <- c(fc, (fc_y_supurge$mean[1]+fc_t_supurge$mean[1]))
#SEASONALITY - SUPURGE - NO SEASONALITY
#f_supurge=fourier(y_supurge, K=3)
#str(f_supurge)
#matplot(f_supurge[1:7,1:2],type='l')
#fit_supurge=lm(y_supurge~f_supurge)
#summary(fit_supurge)
#######################
#TREND - YUZTEMIZLEYICI
for_yuztemizleyici = yuztemizleyici[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_yuztemizleyici[,time_index:=1:.N]
#head(for_yuztemizleyici)
trend_yuztemizleyici = lm(sold_count~time_index, data = for_yuztemizleyici)
#trend_yuztemizleyici = lm(sold_count~time_index+visit_count+basket_count, data = for_yuztemizleyici)
summary(trend_yuztemizleyici)
trend_yuztemizleyici_component = trend_yuztemizleyici$fitted
for_yuztemizleyici[,lr_trend:=trend_yuztemizleyici_component]
matplot(for_yuztemizleyici[,list(sold_count, lr_trend)], type = "l")
for_yuztemizleyici[,detr_sc:=sold_count-lr_trend]
detr_for_yuztemizleyici = for_yuztemizleyici[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_yuztemizleyici = ts(detr_for_yuztemizleyici$detr_sc, freq = 7)
plot(y_yuztemizleyici)
fc_y_yuztemizleyici = forecast(y_yuztemizleyici,1)
t_yuztemizleyici = ts(for_yuztemizleyici$lr_trend, freq = 7)
fc_t_yuztemizleyici = forecast(t_yuztemizleyici, 1)
fc <- c(fc, (fc_y_yuztemizleyici$mean[1]+fc_t_yuztemizleyici$mean[1]))
#SEASONALITY - YUZTEMIZLEYICI - NO SEASONALITY
#f_yuztemizleyici=fourier(y_yuztemizleyici, K=3)
#str(f_yuztemizleyici)
#matplot(f_yuztemizleyici[1:7,1:2],type='l')
#fit_yuztemizleyici=lm(y_yuztemizleyici~f_yuztemizleyici)
#summary(fit_yuztemizleyici)
#######################
predictions=unique(data[,list(product_content_id)])
predictions[,forecast:=fc]
send_submission(predictions, token, url=subm_url, submit_now=T)
