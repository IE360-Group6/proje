mae_tayt <- mean(abs(fc_tayt-for_tayt_test))/15
mape_tayt <- 100*mean(abs((fc_tayt-for_tayt_test)/for_tayt_test))/15
>>>>>>> Stashed changes
require(jsonlite)
require(httr)
require(data.table)
require(xts)
require(forecast)
require(ggplot2)
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(product_content_id,event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
post_string=sprintf("%s'%s'=%s",post_string,predictions$product_content_id[i],predictions$forecast[i])
if(i<nrow(predictions)){
post_string=sprintf("%s,",post_string)
} else {
post_string=sprintf("%s)",post_string)
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if(all(c('product_content_id','forecast') %in% names(predictions))){
if(is.numeric(predictions$forecast)){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Wrong column names. Please provide 'product_content_id' and 'forecast' columns")
return(FALSE)
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://167.172.183.67'
u_name = "Group6"
p_word = "HarNGafZYHupCK6x"
submit_now = FALSE
username = u_name
password = p_word
token = get_token(username=u_name, password=p_word, url=subm_url)
data = get_data(token=token,url=subm_url)
#data_temiz <- data[product_content_id==32939029 & basket_count>-1]
dates <- seq(as.Date("2019-04-30"), length = uniqueN(data$event_date), by = "days")
tayt <- xts(data[product_content_id==31515569],order.by=dates)
disfirca <- xts(data[product_content_id==32939029],order.by=dates)
mont <- xts(data[product_content_id==3904356],order.by=dates)
mendil <- xts(data[product_content_id==4066298],order.by=dates)
bikini <- xts(data[product_content_id==5926527],order.by=dates)
kulaklik <- xts(data[product_content_id==6676673],order.by=dates)
supurge <- xts(data[product_content_id==7061886],order.by=dates)
yuztemizleyici <- xts(data[product_content_id==85004],order.by=dates)
<<<<<<< Updated upstream
#autoplot(tayt, facets = TRUE)
#as.numeric(tayt[,"category_sold"])
#price elasticity
#tayt_price_vector <- log(as.numeric(tayt$price>0))
#tayt_sold_vector <- log(as.numeric(tayt$price>0))
#tayt_price_elast <- data.frame(log(tayt_sold_vector),log(tayt_price_vector))
#colnames(tayt_price_elast) <- c("log_sales","log_price")
#tayt_price_elasticity <- lm("log_sales","log_price",data=tayt_price_elast)
#arima model, error test, yarin icin forecast
=======
>>>>>>> Stashed changes
tayt_basket_psu <- window(tayt,start="2019-10-01", end = "2020-05-19")
#tayt_duzgun_basket <- tayt_basket_psu [,"basket_count">0]
#tayt_sold_psu <- window(tayt,start="2019-11-20",end="2020-05-19")
#tayt_duzgun_sold <- tayt_sold_psu [,"basket_count">0]
#tayt_sold <- auto.arima(as.numeric(tayt_duzgun_sold$sold_count), xreg = as.numeric(tayt_duzgun_basket$basket_count))
#checkresiduals(tayt_sold)
#yarin_tayt <- forecast(tayt_sold, xreg = as.numeric(tayt_duzgun_basket$basket_count), h = 2)
tayt_son<-tayt_basket_psu[-179]
tayt_sonn <- tayt_son[as.numeric(tayt_son$price)>0]
yarin_tayt_visit<-forecast(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$visit_count)),xreg=as.numeric(tayt_sonn$visit_count), h = 15)
checkresiduals(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$visit_count)))
#autoplot(yariave<-forecast(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$favored_count)),xreg=as.numeric(tayt_sonn$favored_count)))
#checkresiduals(auto.arima(as.numeric(tayt_sonn$sold_count),xreg=as.numeric(tayt_sonn$favored_count)))
#autoplot(yarin_tayt_fave)
summary(yarin_tayt_visit)
<<<<<<< Updated upstream
#summary(yarin_tayt_fave)
#yarin_tayt$mean
fc_tayt <- yarin_tayt_visit$mean[-c(1:206)]
for_tayt_test = window(tayt, start = "2020-05-20", end = as.Date(as.Date("2020-05-20")+15))
for_tayt_test = for_tayt_test$sold_count
mae_tayt <- mean(abs(fc_tayt-as.numeric(for_tayt_test$sold_count)))/15
mape_tayt <- 100*mean(abs((fc_tayt-as.numeric(for_tayt_test$sold_count))/as.numeric(for_tayt_test$sold_count)))/15
mape_tayt
length(fc_tayt)
mae_tayt <- mean(abs(fc_tayt-as.numeric(for_tayt_test$sold_count)))/16
mape_tayt <- 100*mean(abs((fc_tayt-as.numeric(for_tayt_test$sold_count))/as.numeric(for_tayt_test$sold_count)))/16
#yarin_tayt$mean
fc_tayt <- yarin_tayt_visit$mean[-c(1:207)]
for_tayt_test = window(tayt, start = "2020-05-20", end = as.Date(as.Date("2020-05-20")+14))
for_tayt_test = for_tayt_test$sold_count
mae_tayt <- mean(abs(fc_tayt-as.numeric(for_tayt_test$sold_count)))/15
mape_tayt <- 100*mean(abs((fc_tayt-as.numeric(for_tayt_test$sold_count))/as.numeric(for_tayt_test$sold_count)))/15
mape_tayt
length(fc_tayt)
for_tayt_test = for_tayt_test[event_date >= "2020-05-20" & event_date < as.Date(as.Date("2020-05-20")+14)]$sold_count
for_tayt_test = tayt[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
require(xts)
require(forecast)
require(ggplot2)
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(product_content_id,event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
post_string=sprintf("%s'%s'=%s",post_string,predictions$product_content_id[i],predictions$forecast[i])
if(i<nrow(predictions)){
post_string=sprintf("%s,",post_string)
} else {
post_string=sprintf("%s)",post_string)
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if(all(c('product_content_id','forecast') %in% names(predictions))){
if(is.numeric(predictions$forecast)){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Wrong column names. Please provide 'product_content_id' and 'forecast' columns")
return(FALSE)
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://167.172.183.67'
u_name = "Group6"
p_word = "HarNGafZYHupCK6x"
submit_now = FALSE
username = u_name
password = p_word
token = get_token(username=u_name, password=p_word, url=subm_url)
data = get_data(token=token,url=subm_url)
#######################
#class(data)
products = unique(data$product_content_id)
tayt = data[product_content_id == products[1]]
tayt = tayt[order(event_date)]
#visit_count
#sold_tayt=zoo(tayt[,list(sold_count, visit_count, basket_count, favored_count)],tayt$event_date)
#plot(sold_tayt)
disfirca = data[product_content_id == products[2]]
disfirca = disfirca[order(event_date)]
#visit_count & basket_count
#sold_disfirca=zoo(disfirca[,list(sold_count, visit_count, basket_count, favored_count)],disfirca$event_date)
#plot(sold_disfirca)
mont = data[product_content_id == products[3]]
mont = mont[order(event_date)]
#visit_count | favored_count
#sold_mont=zoo(mont[,list(sold_count, visit_count, basket_count, favored_count)],mont$event_date)
#plot(sold_mont)
mendil = data[product_content_id == products[4]]
mendil = mendil[order(event_date)]
#visit_count
#sold_mendil=zoo(mendil[,list(sold_count, visit_count, basket_count, favored_count)],mendil$event_date)
#plot(sold_mendil)
bikini = data[product_content_id == products[5]]
bikini = bikini[order(event_date)]
#favored_count??
#sold_bikini=zoo(bikini[,list(sold_count, visit_count, basket_count, favored_count)],bikini$event_date)
#plot(sold_bikini)
kulaklik = data[product_content_id == products[6]]
kulaklik = kulaklik[order(event_date)]
#visit_count & (?)favored_count
#sold_kulaklik=zoo(kulaklik[,list(sold_count, visit_count, basket_count, favored_count)],kulaklik$event_date)
#plot(sold_kulaklik)
supurge = data[product_content_id == products[7]]
supurge = supurge[order(event_date)]
#basket_count + visit_cpunt ??
#sold_supurge=zoo(supurge[,list(sold_count, visit_count, basket_count, favored_count)],supurge$event_date)
#plot(sold_supurge)
yuztemizleyici = data[product_content_id == products[8]]
yuztemizleyici = yuztemizleyici[order(event_date)]
#visit_count + basket_count ??
#sold_yuztemizleyici=zoo(yuztemizleyici[,list(sold_count, visit_count, basket_count, favored_count)],yuztemizleyici$event_date)
#plot(sold_yuztemizleyici)
#TREND - TAYT
for_tayt = tayt[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_tayt = for_tayt[event_date > "2019-10-01" & event_date < "2020-05-20"]
for_tayt[,time_index:=1:.N]
head(for_tayt)
trend_tayt = lm(sold_count~time_index, data = for_tayt)
#trend_tayt = lm(sold_count~time_index+visit_count, data = for_tayt)
summary(trend_tayt)
trend_tayt_component = trend_tayt$fitted
for_tayt[,lr_trend:=trend_tayt_component]
matplot(for_tayt[,list(sold_count, lr_trend)], type = "l")
for_tayt[,detr_sc:=sold_count-lr_trend]
detr_for_tayt = for_tayt[,list(detr_sc, event_date, time_index, price, visit_count, favored_count, basket_count)]
y_tayt = ts(detr_for_tayt$detr_sc, freq = 7)
t_tayt = ts(for_tayt$lr_trend, freq = 7)
#plot(y_tayt)
fc_y_tayt = forecast(y_tayt,15)
fc_t_tayt = forecast(t_tayt,15)
fc_tayt <- fc_y_tayt$mean+fc_t_tayt$mean
for_tayt_test = tayt[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_tayt_test = for_tayt_test[event_date >= "2020-05-20" & event_date < as.Date(as.Date("2020-05-20")+14)]$sold_count
mae_tayt <- mean(abs(fc_tayt-for_tayt_test))/15
fc_tayt
for_tayt_test
for_tayt_test = for_tayt_test[event_date >= "2020-05-20" & event_date < as.Date(as.Date("2020-05-20")+15)]$sold_count
for_tayt_test = tayt[,list(sold_count, event_date, price, visit_count, favored_count, basket_count)]
for_tayt_test = for_tayt_test[event_date >= "2020-05-20" & event_date < as.Date(as.Date("2020-05-20")+15)]$sold_count
mae_tayt <- mean(abs(fc_tayt-for_tayt_test))/15
mape_tayt <- 100*mean(abs((fc_tayt-for_tayt_test)/for_tayt_test))/15
mape_tayt
=======
>>>>>>> Stashed changes
View(tayt)
View(tayt)
ziyaret_tayt<-tail(tayt,5)
mean_test_basket_tayt<-head(ziyaret_tayt,3)
mean_basket_tayt<-mean(as.numeric(mean_test_basket_tayt$basket_count))
tayt_basket_start<-window(tayt,start="2020-01-28")
tayt_basket<-window(tayt,start="2020-01-25")
tayt_basket_head<-head(tayt_basket,nrow(tayt_basket_start))
tayt_sold_basket<-auto.arima(as.numeric(tayt_basket_start$sold_count),xreg=as.numeric(tayt_basket_head$basket_count))
checkresiduals(tayt_sold_basket)
yarin_tayt_basket<-forecast(tayt_sold_basket,xreg=mean_basket_tayt)
require(jsonlite)
require(httr)
require(data.table)
require(xts)
require(forecast)
require(ggplot2)
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(product_content_id,event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
post_string=sprintf("%s'%s'=%s",post_string,predictions$product_content_id[i],predictions$forecast[i])
if(i<nrow(predictions)){
post_string=sprintf("%s,",post_string)
} else {
post_string=sprintf("%s)",post_string)
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if(all(c('product_content_id','forecast') %in% names(predictions))){
if(is.numeric(predictions$forecast)){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Wrong column names. Please provide 'product_content_id' and 'forecast' columns")
return(FALSE)
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://167.172.183.67'
u_name = "Group6"
p_word = "HarNGafZYHupCK6x"
submit_now = FALSE
username = u_name
password = p_word
token = get_token(username=u_name, password=p_word, url=subm_url)
data = get_data(token=token,url=subm_url)
#data_temiz <- data[product_content_id==32939029 & basket_count>-1]
dates <- seq(as.Date("2019-04-30"), length = uniqueN(data$event_date), by = "days")
dates <- seq(as.Date("2019-04-30"), length = nrow(data)/8, by = "days")
#dates <- seq(as.Date("2019-04-30"), length = 395, by = "days")
tayt <- xts(data[product_content_id==31515569],order.by=dates)
disfirca <- xts(data[product_content_id==32939029],order.by=dates)
mont <- xts(data[product_content_id==3904356],order.by=dates)
mendil <- xts(data[product_content_id==4066298],order.by=dates)
bikini <- xts(data[product_content_id==5926527],order.by=dates)
kulaklik <- xts(data[product_content_id==6676673],order.by=dates)
supurge <- xts(data[product_content_id==7061886],order.by=dates)
yuztemizleyici <- xts(data[product_content_id==85004],order.by=dates)
#autoplot(tayt, facets = TRUE)
#as.numeric(tayt[,"category_sold"])
#price elasticity
#tayt_price_vector <- log(as.numeric(tayt$price>0))
#tayt_sold_vector <- log(as.numeric(tayt$price>0))
#tayt_price_elast <- data.frame(log(tayt_sold_vector),log(tayt_price_vector))
#colnames(tayt_price_elast) <- c("log_sales","log_price")
#tayt_price_elasticity <- lm("log_sales","log_price",data=tayt_price_elast)
#arima model, error test, yarin icin forecast
test_tayt<-tail(tayt,7)
tayt_start <- window(tayt,start="2020-01-05")
#tayt_basket <- tayt_basket_psu [,"favored_count">0]
tayt_fav_duration<- window(tayt,start="2020-01-02",end=tayt[nrow(tayt)-3]$event_date)
#tayt_duzgun_sold <- tayt_sold_duration[,"favored_count">0]
tayt_sold_fav <- auto.arima(as.numeric(tayt_start$sold_count), xreg = as.numeric(tayt_fav_duration$favored_count))
checkresiduals(tayt_sold_fav)
yarin_tayt_fav <- forecast(tayt_sold_fav, xreg = as.numeric(test_tayt$favored_count))
tayt_son<-tayt_start[-179]
tayt_sonn <- tayt_son[as.numeric(tayt_son$price)>0]
tayt_sold_visit<-auto.arima(as.numeric(tayt_start$sold_count),xreg=as.numeric(tayt_fav_duration$visit_count))
checkresiduals(tayt_sold_visit)
yarin_tayt_visit<-forecast(tayt_sold_visit,xreg=as.numeric(test_tayt$visit_count))
summary(yarin_tayt_visit)
#regressor is the mean of basket of 3-5 days
ziyaret_tayt<-tail(tayt,5)
mean_test_basket_tayt<-head(ziyaret_tayt,3)
mean_basket_tayt<-mean(as.numeric(mean_test_basket_tayt$basket_count))
tayt_basket_start<-window(tayt,start="2020-01-28")
tayt_basket<-window(tayt,start="2020-01-25")
tayt_basket_head<-head(tayt_basket,nrow(tayt_basket_start))
tayt_sold_basket<-auto.arima(as.numeric(tayt_basket_start$sold_count),xreg=as.numeric(tayt_basket_head$basket_count))
checkresiduals(tayt_sold_basket)
yarin_tayt_basket<-forecast(tayt_sold_basket,xreg=mean_basket_tayt)
View(disfirca)
View(disfirca)
ziyaret_disfirca<-tail(disfirca,5)
mean_test_basket_disfirca<-head(ziyaret_disfirca,3)
mean_basket_disfirca<-mean(as.numeric(mean_test_basket_disfirca$basket_count))
disfirca_basket_start<-window(disfirca,start="2020-01-27")
disfirca_basket<-window(disfirca,start="2020-01-24")
disfirca_basket_head<-head(disfirca_basket,nrow(disfirca_basket_start))
disfirca_sold_basket<-auto.arima(as.numeric(disfirca_basket_start$sold_count),xreg=as.numeric(disfirca_basket_head$basket_count))
checkresiduals(disfirca_sold_basket)
yarin_disfirca_basket<-forecast(disfirca_sold_basket,xreg=mean_basket_disfirca)
train_mont<-tail(mont,90)
test_mont<-tail(mont,7)
mont_sold_fav <- auto.arima(as.numeric(train_mont$sold_count), xreg = as.numeric(train_mont$favored_count))
checkresiduals(mont_sold_fav)
yarin_mont_fav <- forecast(mont_sold_fav, xreg = as.numeric(test_mont$sold_count))
autoplot(yarin_mont_fav)
yarin_mont_fav$mean
#fc <- c(fc, as.numeric(yarin_mont_fav$mean[1]))
fc <- c(fc, as.numeric(yarin_mont_fav$mean[1]))
mendil_sold_price <- auto.arima(as.numeric(mendil_start$sold_count), xreg = as.numeric(mendil_start$price))
autoplot(mendil_sold_price)
summary(mendil_sold_price)
checkresiduals(mendil_sold_price)
yarin_mendil_price<- forecast(mendil_sold_price, xreg = as.numeric(test_mendil$price))
autoplot(yarin_mendil_price)
View(mendil)
View(mendil)
bikini_start<-window(bikini,start="2020-05-15")
bikini_sold <- auto.arima(as.numeric(bikini_start$sold_count), xreg = as.numeric(bikini_start$visit_count))
checkresiduals(bikini_sold)
test_bikini<-tail(bikini,7)
yarin_bikini <- forecast(bikini_sold, xreg = as.numeric(test_bikini$visit_count))
yarin_bikini$mean
autoplot(yarin_bikini)
#fc <- c(fc, yarin_bikini$mean[2])
fc <- c(fc, yarin_bikini$mean[1])
View(kulaklik)
View(kulaklik)
